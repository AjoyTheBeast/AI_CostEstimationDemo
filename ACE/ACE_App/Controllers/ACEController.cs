using System.IO;
using System.Threading.Tasks;
using ACE_App.Models;
using ACE_App.Services;
using Aspose.Pdf;
using Aspose.Pdf.Text;
using Microsoft.AspNetCore.Mvc;
using static iTextSharp.text.pdf.AcroFields;

namespace ACE_App.Controllers
{
    public class ACEController : Controller
    {
        private readonly IACEService _ace;
        public ACEController(IACEService ace)
        {
            _ace = ace;
        }
        public IActionResult Index()
        {
            return View();
        }

        [HttpPost]
        public async Task<IActionResult> Create(ACEModel item, bool generatePdf = false)
        {
            // Check if user input is provided
            if (string.IsNullOrEmpty(item.UserInput))
            {
                TempData["ErrorMessage"] = "Please enter the input before generating the output and required PDF.";
                return View("Index", item);
            }
            var result = await _ace.GetEstimation(item.UserInput);
            Thread.Sleep(5000); // Simulate a delayed response from API
            TempData["UserInput"] = item.UserInput;
            item.UserInput = "";

            if (!string.IsNullOrEmpty(result.MLOutput))
            {
                item.MLOutput = result.MLOutput;
            }

            item.ErrorMessage = result.ErrorMessage;
            ViewBag.DisplayErrorMessage = !string.IsNullOrEmpty(item.ErrorMessage);
            ViewBag.EnableSubmit = true;

            if (generatePdf)
            {
                // Redirect to GeneratePdf action and pass UserInput via TempData
                return RedirectToAction("GeneratePdf");
            }

            return View("Index", item);
        }

        // Action method for generating PDF
        [HttpGet]
        public IActionResult GeneratePdf()
        {
            string userInput = TempData["UserInput"] as string;
            if (string.IsNullOrEmpty(userInput))
            {
                // Redirect back to the form with an error if no user input was found
                TempData["ErrorMessage"] = "No input provided for PDF generation.";
                return RedirectToAction("Index");
            }
            ACEModel model = new ACEModel { UserInput = userInput };
            byte[] pdfBytes = GeneratePdfDocument(model);  // Generate the PDF document
            return File(pdfBytes, "application/pdf", "ACE_Model_Output.pdf");
        }
        private byte[] GeneratePdfDocument(ACEModel model)
        {

            Document pdfDocument = new Document();
            Page page = pdfDocument.Pages.Add();
            // Define margins and spacing
            float leftMargin = 10;
            float topMargin = 10;
            float rightMargin = 10;
            float bottomMargin = 10; // points
            float spacing = 5;
            TextFragment titleFragment = new TextFragment("This is Autogenerated Report for ACE Output")
            {
                Margin = new MarginInfo { Top = topMargin, Left = leftMargin, Right = rightMargin }
            };
            titleFragment.TextState.FontSize = 18;
            titleFragment.TextState.FontStyle = FontStyles.Bold;
            titleFragment.TextState.ForegroundColor = Aspose.Pdf.Color.DarkBlue;
            page.Paragraphs.Add(titleFragment);
            topMargin += spacing; // Space after title
            TextFragment inputTitleFragment = new TextFragment("\nAs per the User Input:\n")
            {
                Margin = new MarginInfo { Top = topMargin, Left = leftMargin, Right = rightMargin }
            };
            inputTitleFragment.TextState.FontSize = 14;
            inputTitleFragment.TextState.FontStyle = FontStyles.Bold;
            inputTitleFragment.TextState.ForegroundColor = Aspose.Pdf.Color.DarkKhaki;
            page.Paragraphs.Add(inputTitleFragment);
            topMargin += spacing; // Space before content
            TextFragment inputFragment = new TextFragment(model.UserInput)
            {
                Margin = new MarginInfo { Top = 0, Left = leftMargin, Right = rightMargin }
            };
            inputFragment.TextState.FontSize = 12;
            inputFragment.TextState.ForegroundColor = Aspose.Pdf.Color.Black;
            page.Paragraphs.Add(inputFragment);

            // Check if there is an error message
            if (!string.IsNullOrEmpty(model.ErrorMessage))
            {

                topMargin += spacing;
                TextFragment errorFragment = new TextFragment($"Error: {model.ErrorMessage}")
                {
                    Margin = new MarginInfo { Top = topMargin, Left = leftMargin, Right = rightMargin }
                };
                errorFragment.TextState.FontSize = 12;
                errorFragment.TextState.ForegroundColor = Aspose.Pdf.Color.Red;
                page.Paragraphs.Add(errorFragment);
            }
            else if (!string.IsNullOrEmpty(model.MLOutput))
            {
                topMargin += spacing; // Space before output data
                TextFragment outputTitleFragment = new TextFragment($"This is the Cost Estimation by the System:\n")
                {
                    Margin = new MarginInfo { Top = topMargin, Left = leftMargin, Right = rightMargin }
                };
                outputTitleFragment.TextState.FontSize = 14;
                outputTitleFragment.TextState.FontStyle = FontStyles.Bold;
                outputTitleFragment.TextState.ForegroundColor = Aspose.Pdf.Color.DarkGreen;
                page.Paragraphs.Add(outputTitleFragment);
                topMargin += spacing;
                TextFragment OutputFragment = new TextFragment(model.MLOutput)
                {
                    Margin = new MarginInfo { Top = 0, Left = leftMargin, Right = rightMargin }
                };
                OutputFragment.TextState.FontSize = 12;
                OutputFragment.TextState.ForegroundColor = Aspose.Pdf.Color.Black;
                page.Paragraphs.Add(OutputFragment);
            }
            else
            {
                // Handle case where output cannot be printed
                topMargin += spacing;
                TextFragment noOutputFragment = new TextFragment("Request cannot be processed at the moment.")
                {
                    Margin = new MarginInfo { Top = topMargin, Left = leftMargin, Right = rightMargin }
                };
                noOutputFragment.TextState.FontSize = 12;
                noOutputFragment.TextState.ForegroundColor = Aspose.Pdf.Color.Red;
                page.Paragraphs.Add(noOutputFragment);
            }
            // Convert the PDF document to a byte array
            using (MemoryStream stream = new MemoryStream())
            {
                pdfDocument.Save(stream);
                return stream.ToArray();
            }
        }

    }
}
